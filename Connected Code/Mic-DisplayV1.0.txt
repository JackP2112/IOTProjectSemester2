#include "SSD1306Ascii.h"
#include "SSD1306AsciiAvrI2c.h"
#define I2C_ADDRESS 0x3C
#define RST_PIN -1
SSD1306AsciiAvrI2c oled;

#include "arduinoFFT.h"
 
#define SAMPLES 128             //Must be a power of 2
#define SAMPLING_FREQUENCY 1000 //Hz, must be less than 10000 due to ADC
 
arduinoFFT FFT = arduinoFFT();
 
unsigned int sampling_period_us;
unsigned long microseconds;
 
double vReal[SAMPLES];
double vImag[SAMPLES];
String selection;
int currentPitch;
int targetPitch;

void setup() {
  Serial.begin(115200);
  sampling_period_us = round(1000000*(1.0/SAMPLING_FREQUENCY));
#if RST_PIN >= 0
  oled.begin(&Adafruit128x64, I2C_ADDRESS, RST_PIN);
#else // RST_PIN >= 0
  oled.begin(&Adafruit128x64, I2C_ADDRESS);
#endif // RST_PIN >= 0
  selection = "A4";
  targetPitch = 440;
  oled.setFont(Adafruit5x7);
}

void loop() {
  /*SAMPLING*/
    for(int i=0; i<SAMPLES; i++)
    {
        microseconds = micros();    //Overflows after around 70 minutes!
     
        vReal[i] = analogRead(0);
        vImag[i] = 0;
     
        while(micros() < (microseconds + sampling_period_us)){
        }
    }
 
    /*FFT*/
    FFT.Windowing(vReal, SAMPLES, FFT_WIN_TYP_HAMMING, FFT_FORWARD);
    FFT.Compute(vReal, vImag, SAMPLES, FFT_FORWARD);
    FFT.ComplexToMagnitude(vReal, vImag, SAMPLES);
    double peak = FFT.MajorPeak(vReal, SAMPLES, SAMPLING_FREQUENCY);
 
    /*PRINT RESULTS*/
    currentPitch = peak;
    Serial.println(peak);     //Print out what frequency is the most dominant.
    drawScreen(selection, currentPitch, targetPitch);
 
    for(int i=0; i<(SAMPLES/2); i++)
    {
        /*View all these three lines in serial terminal to see which frequencies has which amplitudes*/
         
        //Serial.print((i * 1.0 * SAMPLING_FREQUENCY) / SAMPLES, 1);
        //Serial.print(" ");
        //Serial.println(vReal[i], 1);    //View only this line in serial plotter to visualize the bins
    }
 
    delay(1000);  //Repeat the process every second OR:
    //while(1);       //Run code once
}

void drawScreen(String selection, int currentPitch, int targetPitch){
  oled.clear();
  oled.set2X();
  oled.setCursor(60,2);
  oled.print(selection.substring(0,1));
  oled.set1X();
  oled.setCursor(70,4);
  oled.print(selection.substring(1));
  oled.setCursor(15,6);
  oled.print(String(currentPitch));
  oled.setCursor(35,6);
  oled.print("Hz");
  oled.setCursor(60,6);
  if(currentPitch < targetPitch){
    oled.print("/\\");
  }
  else if(currentPitch == targetPitch){
    oled.print("==");
  }
  else if(currentPitch > targetPitch){
    oled.print("\\/");
  }
  oled.setCursor(85,6);
  oled.print(String(targetPitch));
  oled.setCursor(105,6);
  oled.print("Hz");
}
